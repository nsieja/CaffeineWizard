Author:  Nick Sieja
Date:    9/5/2024
Updated: 9/5/2024

This document is used for:

a) Conceptual Notes / Ideas and
b) Implementation steps that will be deleted once implemented


a. Notes / Ideas

* Use Pyforms module to integrate open source API for user interface similar to Windows Forms (simple)

Table 1. Summarize Caffeine’s Pharmacokinetics
Log P: 0.85
Absorption rate constant (K01): ~0.33 minute^-1
Volume of distribution: 0.5–0.75 L/kg
Plasma-protein binding: ~10–30%
Half-life (t1/2): ~4 hrs
Clearance: ~1–3 mg/kg/min
Elimination rate constant: ~0.09–0.33 hour^-1

* In final user interface, use loading screen graphics for phase between input and graph display to cover
for long processing time during ODE calc if necessary

* Should use Django for Python-enabled back-end
* Should use React or similar (JS) for web and mobile supported front end (UI)

* Possible replacement names: Cafinnity, JavaMeter



b. Implementations

* Script for calculations and plotting (caffeineWizard)
* Function cafCalculate(caf, drinkTime, projectionTime, *k1, *k2) | returns cafModel
    - caf is amount in mg (recommend to user: 60mg)
    - drinkTime is time to drink (recommend to user: 10min)
    - projectionTime is time to plot response (recommend 4hr)
    - k1,k2 are optional inputs (default values determined by research in "sources")
    - returns cafModel, a tupel containing 1 list of floats corresponding to caffeine levels in GI tract, 
      1 list of floats corresponding to caffeine levels in blood, and 1 list of floats that represent the 
      time (independent variable) for plotting purposes
*Function for plotting
    - uses matplotlib.pyplot as plt to display results of cafCalculate (cafModel)